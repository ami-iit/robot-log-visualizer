#! /bin/bash
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
cd "${SCRIPT_DIR}" || exit 1

if [ -x "${SCRIPT_DIR}/.venv/bin/python" ] && "${SCRIPT_DIR}/.venv/bin/python" -c "import importlib.util as _il; mod=_il.find_spec('qtpy.uic.pyuic'); import sys; sys.exit(0 if mod else 1)" >/dev/null 2>&1; then
	PYUIC_CMD=("${SCRIPT_DIR}/.venv/bin/python" "-m" "qtpy.uic.pyuic")
elif command -v python >/dev/null 2>&1 && python -c "import importlib.util as _il; mod=_il.find_spec('qtpy.uic.pyuic'); import sys; sys.exit(0 if mod else 1)" >/dev/null 2>&1; then
	PYUIC_CMD=(python "-m" "qtpy.uic.pyuic")
elif command -v python3 >/dev/null 2>&1 && python3 -c "import importlib.util as _il; mod=_il.find_spec('qtpy.uic.pyuic'); import sys; sys.exit(0 if mod else 1)" >/dev/null 2>&1; then
	PYUIC_CMD=(python3 "-m" "qtpy.uic.pyuic")
elif command -v pyside6-uic >/dev/null 2>&1; then
	PYUIC_CMD=(pyside6-uic)
elif [ -x "${SCRIPT_DIR}/.venv/bin/pyside6-uic" ]; then
	PYUIC_CMD=("${SCRIPT_DIR}/.venv/bin/pyside6-uic")
elif [ -x "${SCRIPT_DIR}/.venv/bin/python" ]; then
	PYUIC_CMD=("${SCRIPT_DIR}/.venv/bin/python" "-m" "PySide6.scripts.uic")
elif command -v python >/dev/null 2>&1; then
	PYUIC_CMD=(python "-m" "PySide6.scripts.uic")
elif command -v python3 >/dev/null 2>&1; then
	PYUIC_CMD=(python3 "-m" "PySide6.scripts.uic")
else
	echo "Error: pyside6-uic or qtpy.uic.pyuic not found. Please install the Qt tools." >&2
	exit 1
fi

echo "Generate the main window"
"${PYUIC_CMD[@]}" -o robot_log_visualizer/ui/autogenerated/visualizer.py robot_log_visualizer/ui/misc/visualizer.ui

echo "Generate Additional windows"
"${PYUIC_CMD[@]}" -o  robot_log_visualizer/ui/autogenerated/about.py robot_log_visualizer/ui/misc/about.ui
"${PYUIC_CMD[@]}" -o  robot_log_visualizer/ui/autogenerated/set_robot_model.py robot_log_visualizer/ui/misc/set_robot_model.ui

echo "Generate tab"
"${PYUIC_CMD[@]}" -o  robot_log_visualizer/ui/autogenerated/plot_tab.py robot_log_visualizer/ui/misc/plot_tab.ui
"${PYUIC_CMD[@]}" -o  robot_log_visualizer/ui/autogenerated/video_tab.py robot_log_visualizer/ui/misc/video_tab.ui

if [ -x "${SCRIPT_DIR}/.venv/bin/python" ]; then
	POST_PYTHON="${SCRIPT_DIR}/.venv/bin/python"
elif command -v python >/dev/null 2>&1; then
	POST_PYTHON=$(command -v python)
elif command -v python3 >/dev/null 2>&1; then
	POST_PYTHON=$(command -v python3)
else
	echo "Error: Python interpreter not found for post-processing." >&2
	exit 1
fi

"${POST_PYTHON}" <<'PYCODE'
from pathlib import Path

AUTOGEN_DIR = Path("robot_log_visualizer/ui/autogenerated")

REPLACEMENTS = {
	"from PyQt6 import QtCore, QtGui, QtWidgets": "from qtpy import QtCore, QtGui, QtWidgets",
	"from PyQt6 import QtWebEngineWidgets": "from qtpy import QtWebEngineWidgets",
	"from PyQt6.QtMultimediaWidgets import QVideoWidget": "from qtpy.QtMultimediaWidgets import QVideoWidget",
	"from PySide6 import QtCore, QtGui, QtWidgets": "from qtpy import QtCore, QtGui, QtWidgets",
	"from PySide6 import QtWebEngineWidgets": "from qtpy import QtWebEngineWidgets",
	"from PySide6.QtMultimediaWidgets import QVideoWidget": "from qtpy.QtMultimediaWidgets import QVideoWidget",
	"QtWidgets.QSizePolicy.Policy.": "QtWidgets.QSizePolicy.",
	"QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.": "QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.",
	"QtCore.Qt.Orientation.": "QtCore.Qt.",
	"QtWidgets.QFrame.Shape.": "QtWidgets.QFrame.",
	"QtWidgets.QFrame.Shadow.": "QtWidgets.QFrame.",
	"QtWidgets.QAbstractItemView.SelectionMode.": "QtWidgets.QAbstractItemView.",
	"QtWidgets.QAbstractItemView.EditTrigger.": "QtWidgets.QAbstractItemView.",
	"QtWidgets.QAbstractScrollArea.SizeAdjustPolicy.": "QtWidgets.QAbstractScrollArea.",
	"QtWidgets.QAbstractItemView.ScrollMode.": "QtWidgets.QAbstractItemView.",
	"QtCore.Qt.ScrollBarPolicy.": "QtCore.Qt.",
	"QtCore.Qt.PenStyle.": "QtCore.Qt.",
	"QtWidgets.QTabWidget.TabPosition.": "QtWidgets.QTabWidget.",
	"QtWidgets.QHeaderView.ResizeMode.": "QtWidgets.QHeaderView.",
	"QtGui.QIcon.Mode.": "QtGui.QIcon.",
	"QtGui.QIcon.State.": "QtGui.QIcon.",
	"QtGui.QCursor(QtCore.Qt.CursorShape.": "QtGui.QCursor(QtCore.Qt.",
	"QtCore.Qt.ContextMenuPolicy.": "QtCore.Qt.",
	"QtWidgets.QDialogButtonBox.StandardButton.": "QtWidgets.QDialogButtonBox.",
}

for path in AUTOGEN_DIR.glob("*.py"):
	text = path.read_text()
	original = text
	for old, new in REPLACEMENTS.items():
		text = text.replace(old, new)
	text = text.replace("PyQt6 UI code generator", "Qt-based UI code generator")
	text = text.replace("PySide6 UI code generator", "Qt-based UI code generator")
	if text != original:
		path.write_text(text)
PYCODE

echo "The ui is generated"
